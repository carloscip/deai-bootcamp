"use client";

import { Loader2 } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import type { JokeResult } from "@/types/joke-types";
import { cn } from "@/lib/utils";

interface JokeDisplayProps {
  joke: JokeResult | null;
  isLoading?: boolean;
  className?: string;
}

export function JokeDisplay({
  joke,
  isLoading = false,
  className,
}: JokeDisplayProps) {
  return (
    <Card className={cn("h-full flex flex-col", className)}>
      <CardHeader>
        <CardTitle>Your Joke</CardTitle>
      </CardHeader>
      <CardContent className="flex-1 flex flex-col">
        {isLoading ? (
          <div className="flex-1 flex items-center justify-center">
            <Loader2 className="h-8 w-8 animate-spin text-primary" />
          </div>
        ) : joke ? (
          <div className="space-y-6 flex-1">
            {joke.modelInfo && (
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <span>Generated by:</span>
                <Badge variant="outline" className="font-normal">
                  {joke.modelInfo.name} ({joke.modelInfo.provider})
                </Badge>
                {joke.modelInfo.inputCost === 0 &&
                  joke.modelInfo.outputCost === 0 && (
                    <Badge
                      variant="outline"
                      className="bg-green-50 text-green-700 border-green-200"
                    >
                      Free
                    </Badge>
                  )}
              </div>
            )}

            <div className="bg-muted p-4 rounded-lg min-h-[150px] flex items-center">
              <p className="text-lg whitespace-pre-line">{joke.content}</p>
            </div>

            <div className="space-y-4">
              <h3 className="font-medium text-lg">AI Evaluation</h3>

              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-sm">Humor Level</span>
                  <HumorBadge level={joke.evaluation.humorLevel} />
                </div>

                <div className="flex items-center justify-between">
                  <span className="text-sm">Appropriateness</span>
                  <AppropriatenessBadge
                    level={joke.evaluation.appropriateness}
                  />
                </div>

                <div className="flex items-center justify-between">
                  <span className="text-sm">Originality</span>
                  <OriginalityBadge level={joke.evaluation.originality} />
                </div>
              </div>

              {joke.evaluation.feedback && (
                <div className="pt-2">
                  <h4 className="text-sm font-medium mb-1">AI Feedback:</h4>
                  <p className="text-sm text-muted-foreground">
                    {joke.evaluation.feedback}
                  </p>
                </div>
              )}
            </div>
          </div>
        ) : (
          <div className="flex-1 flex items-center justify-center text-center text-muted-foreground">
            <p>
              Configure your joke parameters and click "Generate Joke" to see
              the result here
            </p>
          </div>
        )}
      </CardContent>
    </Card>
  );
}

function HumorBadge({ level }: { level: string }) {
  const getColor = () => {
    switch (level.toLowerCase()) {
      case "hilarious":
        return "bg-green-500 hover:bg-green-600";
      case "funny":
        return "bg-emerald-500 hover:bg-emerald-600";
      case "amusing":
        return "bg-blue-500 hover:bg-blue-600";
      case "mild":
        return "bg-yellow-500 hover:bg-yellow-600";
      case "flat":
        return "bg-red-500 hover:bg-red-600";
      default:
        return "bg-gray-500 hover:bg-gray-600";
    }
  };

  return <Badge className={cn(getColor())}>{level}</Badge>;
}

function AppropriatenessBadge({ level }: { level: string }) {
  const getColor = () => {
    switch (level.toLowerCase()) {
      case "family-friendly":
        return "bg-green-500 hover:bg-green-600";
      case "appropriate":
        return "bg-blue-500 hover:bg-blue-600";
      case "edgy":
        return "bg-yellow-500 hover:bg-yellow-600";
      case "inappropriate":
        return "bg-orange-500 hover:bg-orange-600";
      case "offensive":
        return "bg-red-500 hover:bg-red-600";
      default:
        return "bg-gray-500 hover:bg-gray-600";
    }
  };

  return <Badge className={cn(getColor())}>{level}</Badge>;
}

function OriginalityBadge({ level }: { level: string }) {
  const getColor = () => {
    switch (level.toLowerCase()) {
      case "brilliant":
        return "bg-purple-500 hover:bg-purple-600";
      case "original":
        return "bg-indigo-500 hover:bg-indigo-600";
      case "decent":
        return "bg-blue-500 hover:bg-blue-600";
      case "common":
        return "bg-yellow-500 hover:bg-yellow-600";
      case "clich√©":
        return "bg-orange-500 hover:bg-orange-600";
      default:
        return "bg-gray-500 hover:bg-gray-600";
    }
  };

  return <Badge className={cn(getColor())}>{level}</Badge>;
}
